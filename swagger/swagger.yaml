# swagger/swagger.yaml
swagger: "2.0"
info:
  description: "This is a sample server Blogging server."
  version: "1.0.0"
  title: "Blogging API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "you@yourdomain.com"
host: "localhost:5000"
basePath: "/"
tags:
- name: "users"
  description: "Operations related to users"
- name: "posts"
  description: "Operations related to posts"
- name: "comments"
  description: "Operations related to comments"
- name: "auth"
  description: "Operations related to authentication"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Create a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
        405:
          description: "Invalid input"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get user by user ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "User object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete a user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "User deleted"
        404:
          description: "User not found"
# Add similar paths for posts and comments

definitions:
  User:
    type: "object"
    required:
    - "name"
    - "email"
    - "username"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
  Post:
    type: "object"
    required:
    - "title"
    - "content"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      content:
        type: "string"
      author:
        $ref: "#/definitions/User"
  Comment:
    type: "object"
    required:
    - "content"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      author:
        $ref: "#/definitions/User"
      post:
        $ref: "#/definitions/Post"
