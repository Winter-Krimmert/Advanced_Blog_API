openapi: 3.0.1
info:
  title: Blog API
  description: API documentation for the Blog application.
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Local server
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        username:
          type: string
          example: johndoe
      required:
        - name
        - email
        - username

    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: My First Post
        content:
          type: string
          example: This is the content of the post.
        date_posted:
          type: string
          format: date-time
          example: 2024-07-18T00:00:00Z
        author:
          $ref: '#/components/schemas/User'
      required:
        - title
        - content

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: This is a comment.
        date_posted:
          type: string
          format: date-time
          example: 2024-07-18T00:00:00Z
        post_id:
          type: integer
          example: 1
        author:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'
      required:
        - content
        - post_id

  parameters:
    UserIdParam:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        type: integer

    PostIdParam:
      name: id
      in: path
      description: ID of the post
      required: true
      schema:
        type: integer

    CommentIdParam:
      name: id
      in: path
      description: ID of the comment
      required: true
      schema:
        type: integer

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        description: User object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
      x-tests:
        - id: test_register_user
          description: Tests user registration endpoint with valid data.
          assertions:
            - status_code: 201
            - message: 'User created successfully'
        - id: test_successful_authenticate
          description: Tests user authentication with valid credentials.
          assertions:
            - status_code: 200
            - token: present

    get:
      summary: Retrieve a list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      x-tests:
        - id: test_get_user
          description: Tests retrieval of a user by ID.
          assertions:
            - status_code: 200
            - username: 'testuser'

    put:
      summary: Update a user by ID
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        description: User object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '404':
          description: User not found
      x-tests:
        - id: test_update_user
          description: Tests updating a user by ID.
          assertions:
            - status_code: 200
            - name: 'Updated Name'

    delete:
      summary: Delete a user by ID
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
      x-tests:
        - id: test_delete_user
          description: Tests deletion of a user by ID.
          assertions:
            - status_code: 204

  /posts:
    post:
      summary: Create a new post
      requestBody:
        description: Post object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
      x-tests:
        - id: test_create_post
          description: Tests creation of a new post with valid data.
          assertions:
            - status_code: 201
            - id: present

    get:
      summary: Retrieve a list of posts
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: Number of posts per page
          schema:
            type: integer
            example: 10
        - name: search
          in: query
          description: Search term for post titles
          schema:
            type: string
            example: 'example'
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/{id}:
    get:
      summary: Retrieve a post by ID
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
      x-tests:
        - id: test_get_post
          description: Tests retrieval of a post by ID.
          assertions:
            - status_code: 200
            - title: 'Test Post'

    put:
      summary: Update a post by ID
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      requestBody:
        description: Post object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '404':
          description: Post not found
      x-tests:
        - id: test_update_post
          description: Tests updating a post by ID.
          assertions:
            - status_code: 200
            - title: 'Updated Title'

    delete:
      summary: Delete a post by ID
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '204':
          description: Post deleted
        '404':
          description: Post not found
      x-tests:
        - id: test_delete_post
          description: Tests deletion of a post by ID.
          assertions:
            - status_code: 204

  /comments:
    post:
      summary: Create a new comment
      requestBody:
        description: Comment object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
      x-tests:
        - id: test_create_comment
          description: Tests creation of a new comment with valid data.
          assertions:
            - status_code: 201
            - id: present

  /comments/{id}:
    get:
      summary: Retrieve a comment by ID
      parameters:
        - $ref: '#/components/parameters/CommentIdParam'
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
      x-tests:
        - id: test_get_comment
          description: Tests retrieval of a comment by ID.
          assertions:
            - status_code: 200
            - content: 'This is a comment.'

    put:
      summary: Update a comment by ID
      parameters:
        - $ref: '#/components/parameters/CommentIdParam'
      requestBody:
        description: Comment object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '404':
          description: Comment not found
      x-tests:
        - id: test_update_comment
          description: Tests updating a comment by ID.
          assertions:
            - status_code: 200
            - content: 'Updated Comment'

    delete:
      summary: Delete a comment by ID
      parameters:
        - $ref: '#/components/parameters/CommentIdParam'
      responses:
        '204':
          description: Comment deleted
        '404':
          description: Comment not found
      x-tests:
        - id: test_delete_comment
          description: Tests deletion of a comment by ID.
          assertions:
            - status_code: 204
